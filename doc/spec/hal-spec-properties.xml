<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVSID: $Id$ -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="device-properties">
  <title>Device Properties</title>
  <para>
    Properties are arranged in a namespaces using ''.'' as a separator
    and are key/value pairs. The value may assume different types; currently
    int32, double, bool, UTF8 strings and UTF8 string lists are supported.
    The key of a property is always an ASCII string without any whitespace.
    The properties are updated in real-time.
  </para>

  <sect1 id="properties-metadata">
    <title>Metadata Properties</title>
    <para>
      The section represents properties that aren't tied to either
      physical or functional characteristics of what the device
      object represents.
    </para>
    <sect2 id="device-properties-info">
      <title>
        <literal>info</literal> namespace
      </title>
      <para>
        The <literal>info</literal> namespace contain properties that
        can be considered metadata about device objects. These
        properties are always available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>info.bus</literal> (string)
              </entry>
              <entry>pci, usb, ide_host, ide, block, usb, usbif, scsi_host, scsi</entry>
              <entry>Yes</entry>
              <entry>Describes what ''physical'' bus the device is connected to</entry>
            </row>
            <row>
              <entry>
                <literal>info.udi</literal> (string)
              </entry>
              <entry>example: /org/freedesktop/Hal/devices/pci_10ec_8139</entry>
              <entry>Yes</entry>
              <entry>The HAL unique device id</entry>
            </row>
            <row>
              <entry>
                <literal>info.persistent</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                No, but required if <literal>info.not_available</literal> is set to TRUE
              </entry>
              <entry>If this property is set, the device will remain in the
                the GDL even if the device is unplugged. NOTE: property not implemented yet
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.not_available</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The device is currently not available (it may be unplugged
                or powered down) NOTE: property not implemented yet
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.capabilities</literal> (strlist)
              </entry>
              <entry>example: 'block, storage, storage.cdrom'</entry>
              <entry>No</entry>
              <entry>A string list of capabilities describing what the devices does</entry>
            </row>
            <row>
              <entry>
                <literal>info.category</literal> (string)
              </entry>
              <entry>example: storage.cdrom</entry>
              <entry>No</entry>
              <entry>The prominent capability describing what the device is</entry>
            </row>
            <row>
              <entry>
                <literal>info.product</literal> (string)
              </entry>
              <entry>examples: ''SleekKeyboard'', ''MouseMan 2003'', ''Volume'', ''LS-120 SLIM3 00 UHD Floppy''</entry>
              <entry>No</entry>
              <entry>The name of the device</entry>
            </row>
            <row>
              <entry>
                <literal>info.vendor</literal> (string)
              </entry>
              <entry>examples: Logitch, Mustek</entry>
              <entry>No</entry>
              <entry>The name of the vendor of the device</entry>
            </row>
            <row>
              <entry>
                <literal>info.parent</literal> (string)
              </entry>
              <entry>example: /org/freedesktop/Hal/devices/ide_1_0</entry>
              <entry>Yes, for all non-root device objects</entry>
              <entry>The UDI of the device object that this device object
                is connected to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.locked</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If this property is available and set
                to <literal>TRUE</literal> it means that a process
                is using the device that the hal device object in
                question represents and no other process should attempt
                to use or configure the device. The lock is only
                advisory.
              </entry>
            </row>
            <row>
              <entry>
                <literal>info.locked.reason</literal> (string)
              </entry>
              <entry>
                example: ''The optical drive is currently being used to
                record a CD-RW disc.''
              </entry>
              <entry>
                Only available if <literal>info.locked</literal> is set
                to <literal>TRUE</literal>.
              </entry>
              <entry>A localized text suitable for UI display</entry>
            </row>
            <row>
              <entry>
                <literal>info.locked.dbus_service</literal> (string)
              </entry>
              <entry>example: :1.278</entry>
              <entry>
                Only available if <literal>info.locked</literal> is set
                to <literal>TRUE</literal>.
              </entry>
              <entry>The base D-BUS service of the process holding the lock.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-linux">
      <title>
        <literal>linux</literal> namespace
      </title>
      <para>
        This namespace is used to store Linux-specific metadata about the
        device object and is only available on Linux systems.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>linux.sysfs_path</literal> (string)
              </entry>
              <entry>examples: /sys/block/sda/sda1, /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0</entry>
              <entry>Yes (only if available for the device) </entry>
              <entry>A fully-qualified path into the sysfs filesystem for the
                physical device
              </entry>
            </row>
            <row>
              <entry>
                <literal>linux.sysfs_path_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes (only if available for the device) </entry>
              <entry>Normally this property assumes the same value as
                linux.sysfs_path, however for some devices it assumes an
                alternate location in the sysfs filesystem. It is used
                internally in HAL
              </entry>
            </row>
            <row>
              <entry>
                <literal>linux.acpi_path</literal> (string)
              </entry>
              <entry>example: /proc/acpi/button/power/PWRF, /proc/pmu/battery_0</entry>
              <entry>No</entry>
              <entry>
                A fully-qualified path into the procfs filesystem for a
                device object representing an ACPI abstraction.
              </entry>
            </row>
            <row>
              <entry>
                <literal>linux.driver</literal> (string)
              </entry>
              <entry>examples: agpgart-intel, yenta_cardbus, usb, hub, usbhid</entry>
              <entry>No</entry>
              <entry>Name of the driver bound to this device</entry>
            </row>
            <row>
              <entry>
                <literal>linux.kernel_devname</literal> (string)
              </entry>
              <entry>example: usb-0000:00:07.2-1.2</entry>
              <entry>No</entry>
              <entry>A name used internally in the Linux kernel to identify
                the device. Used internally in HAL.
              </entry>
            </row>
            <row>
              <entry>
                <literal>linux.is_selinux_enabled</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No; can only appear on the root computer device object</entry>
              <entry>Whether SELinux is enabled on the system</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
  </sect1>

  <sect1 id="properties-bus">
    <title>Physical Properties</title>
    <para>
      In this section properties for device objects that represent
      physically addressable hardware is described. Availability of
      these depends on the value of the <literal>info.bus</literal>
      property.  These properties are not of particular interest to
      application developers, instead they are useful for libraries
      and userspace drivers that needs to interact with the device
      given a UDI. Knowledge of various bus interconnect
      technologies is assumed for this section to be useful.
    </para>
    <sect2 id="device-properties-pci">
      <title>
        <literal>pci</literal> namespace
      </title>
      <para>
        This namespace contains properties for device objects representing
        functions on devices on a PCI bus. These properties are available
        exactly when <literal>info.bus</literal> equals <literal>pci</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pci.device_class</literal> (int)
              </entry>
              <entry>example: 3</entry>
              <entry>Yes</entry>
              <entry>Device Class</entry>
            </row>
            <row>
              <entry>
                <literal>pci.device_subclass</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>PCI Device Sub Class</entry>
            </row>
            <row>
              <entry>
                <literal>pci.device_protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Device Protocol</entry>
            </row>
            <row>
              <entry>
                <literal>pci.product_id</literal> (int)
              </entry>
              <entry>example: 0x4c4d</entry>
              <entry>Yes</entry>
              <entry>Product ID</entry>
            </row>
            <row>
              <entry>
                <literal>pci.vendor_id</literal> (int)
              </entry>
              <entry>example: 0x1002</entry>
              <entry>Yes</entry>
              <entry>Vendor ID</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_product_id</literal> (int)
              </entry>
              <entry>example: 0x009e</entry>
              <entry>Yes</entry>
              <entry>Subsystem product id</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_vendor_id</literal> (int)
              </entry>
              <entry>example: 0x1028</entry>
              <entry>Yes</entry>
              <entry>Subsystem vendor id</entry>
            </row>
            <row>
              <entry>
                <literal>pci.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:01/0000:01:00.0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pci.product</literal> (string)
              </entry>
              <entry>Rage Mobility P/M AGP 2x</entry>
              <entry>No</entry>
              <entry>Name of the product per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.vendor</literal> (string)
              </entry>
              <entry>ATI Technologies Inc</entry>
              <entry>No</entry>
              <entry>Name of the vendor per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_product</literal> (string)
              </entry>
              <entry>Inspiron 7500</entry>
              <entry>No</entry>
              <entry>Name of the subsystem product per the PCI database</entry>
            </row>
            <row>
              <entry>
                <literal>pci.subsys_vendor</literal> (string)
              </entry>
              <entry>Dell Computer Corporation</entry>
              <entry>No</entry>
              <entry>Name of the subsystem vendor per the PCI database</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        (FIXME: Some key PCI information (bus, slot, port, function
        etc.) is missing here)
      </para>
    </sect2>
    <sect2 id="device-properties-serialif">
      <title>
        <literal>serial</literal> namespace
      </title>
      <para>
        Device objects that represent serial devices (e.g. /dev/ttyS* or
        /dev/ttyUSB*).
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>serial.physical_device</literal> (string)
              </entry>
              <entry>
                example: <literal>/org/freedesktop/Hal/devices/pnp_PNP0501</literal>
              </entry>
              <entry>Yes</entry>
              <entry>UDI of the physical device the serial device is bound to.</entry>
            </row>
            <row>
              <entry>
                <literal>serial.device</literal> (string)
              </entry>
              <entry>example: /dev/ttyS0</entry>
              <entry>Yes</entry>
              <entry>The device node to access the OSS device.</entry>
            </row>
            <row>
              <entry>
                <literal>serial.port</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>
                The port number of the device, based on the number in
                <literal>serial.device</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>serial.type</literal> (string)
              </entry>
              <entry>example: platform, usb, unknown</entry>
              <entry>Yes</entry>
              <entry>This property defines the type of the serial device.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-usb">
      <title>
        <literal>usb_device</literal> namespace
      </title>
      <para>
        For device objects representing USB devices the property
        <literal>info.bus</literal> will be <literal>usb_device</literal>,
        and the following properties will be available. Note that the
        corresponding USB interfaces are represented by separate
        device objects as children.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>usb_device.bus_number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The USB bus the device is attached to</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.configuration_value</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The current configuration the USB device is in;
                starting from 1
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_configurations</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of configurations this USB device
                can assume
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_class</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Class</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_subclass</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Sub Class</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>USB Device Protocol</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.is_self_powered</literal> (bool)
              </entry>
              <entry>example: false</entry>
              <entry>Yes</entry>
              <entry>The device, in the current configuration, is self
                powered
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.can_wake_up</literal> (bool)
              </entry>
              <entry>example: true</entry>
              <entry>Yes</entry>
              <entry>The device, in the current configuration, can wake up</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.max_power</literal> (int)
              </entry>
              <entry>example: 98</entry>
              <entry>Yes</entry>
              <entry>Max power drain of device, in mA</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_interfaces</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of USB Interfaces in the current configuration</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.num_ports</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Number of ports on a hub. Zero for non-hubs</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.port_number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>The port number on the parent hub that the device is attached to, starting from 1</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.speed_bcd</literal> (int)
              </entry>
              <entry>examples: 0x00150, 0x01200, 0x48000</entry>
              <entry>Yes</entry>
              <entry>Speed of device, in Mbit/s, in BCD with two decimals</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.version_bcd</literal> (int)
              </entry>
              <entry>examples: 0x0100, 0x0110, 0x0200</entry>
              <entry>Yes</entry>
              <entry>USB version of device in BCD with two decimals</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.level_number</literal> (int)
              </entry>
              <entry>example: 2</entry>
              <entry>Yes</entry>
              <entry>Depth in physical USB tree, where the virtual root hub
                is at depth 0
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.device_number</literal> (string)
              </entry>
              <entry>example: 19</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>USB Device Number as assigned by the Linux kernel</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.parent_number</literal> (string)
              </entry>
              <entry>example: 19</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>Device number of parent device as assigned by the
                Linux kernel
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.2/usb1/1-1/1-1.1</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.product_id</literal> (int)
              </entry>
              <entry>example: 0x3005</entry>
              <entry>Yes</entry>
              <entry>USB Product ID</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.vendor_id</literal> (int)
              </entry>
              <entry>example: 0x04b3</entry>
              <entry>Yes</entry>
              <entry>USB Vendor ID</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.device_revision_bcd</literal> (int)
              </entry>
              <entry>example: 0x0100</entry>
              <entry>Yes</entry>
              <entry>Device Revision Number encoded in BCD with two decimals</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>A string uniquely identifying the instance
                of the device; ie. it will be different for two devices
                of the same type. Note that the serial number is broken
                on some USB devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.product</literal> (string)
              </entry>
              <entry>example: IBM USB HUB KEYBOARD</entry>
              <entry>No</entry>
              <entry>Name of the product per the USB ID Database</entry>
            </row>
            <row>
              <entry>
                <literal>usb_device.vendor</literal> (string)
              </entry>
              <entry>example: IBM Corp.</entry>
              <entry>No</entry>
              <entry>Name of the vendor per the USB ID Database</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-usbif">
      <title>
        <literal>usb</literal> namespace
      </title>
      <para>
        Device objects that represent USB interfaces, ie. when
        <literal>info.bus</literal> assumes <literal>usb</literal>,
        are represented by the properties below. In addition all
        the <literal>usb_device.*</literal> properties from the parent
        USB device is available in this namespace but only with
        the <literal>usb</literal> prefix instead of
        <literal>usb_device</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>usb.interface.class</literal> (int)
              </entry>
              <entry>example: 0x03</entry>
              <entry>Yes</entry>
              <entry>USB Class for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.subclass</literal> (int)
              </entry>
              <entry>example: 0x01</entry>
              <entry>Yes</entry>
              <entry>USB Sub Class for this interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.protocol</literal> (int)
              </entry>
              <entry>example: 0x01</entry>
              <entry>Yes</entry>
              <entry>USB Protocol for the interface</entry>
            </row>
            <row>
              <entry>
                <literal>usb.interface.number</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Number of this interface, starting from zero</entry>
            </row>
            <row>
              <entry>
                <literal>usb.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.2/usb1/1-1/1-1.1/1-1.1:1.0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-platform">
      <title>
        <literal>platform</literal> namespace
      </title>
      <para>
        Devices that are built into the platform or present on busses that
        cannot be properly enumerated (e.g. ISA) are represented by device
        objects where <literal>info.bus</literal> equals
        <literal>platform</literal>. These kind of devices are commonly,
        somewhat incorrectly, called legacy devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>platform.id</literal> (string)
              </entry>
              <entry>example: serial</entry>
              <entry>Yes</entry>
              <entry>Device identification</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ide-host">
      <title>
        <literal>ide_host</literal> namespace
      </title>
      <para>
        The <literal>ide_host</literal> namespace is present for
        device objects where <literal>info.bus</literal> is set
        to <literal>ide_host</literal>.  Such device objects represent
        IDE and ATA host adaptors for harddisks and optical drives as
        found in the majority of computer systems.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ide_host.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the IDE host adaptor</entry>
            </row>
            <row>
              <entry>
                <literal>ide_host.linux.sysfs_path</literal> (string)
              </entry>
              <entry>example: /sys/devices/pci0000:00/0000:00:07.1/ide0</entry>
              <entry>Yes (only on Linux)</entry>
              <entry>
                Equals <literal>linux.sysfs_path</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ide">
      <title>
        <literal>ide</literal> namespace
      </title>
      <para>
        ATA and IDE drives are represented by device objects where
        <literal>info.bus</literal> equals <literal>ide</literal>. The
        following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ide.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Corresponds
                to <literal>ide_host.host_number</literal> of
                the <literal>ide_host</literal> device that is the
                parent of this device object
              </entry>
            </row>
            <row>
              <entry>
                <literal>ide.channel</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Identifies the IDE channel of the host interface</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-scsi_host">
      <title>
        <literal>scsi_host</literal> namespace
      </title>
      <para>
        The <literal>scsi_host</literal> namespace is present for
        device objects where <literal>info.bus</literal> is set
        to <literal>scsi_host</literal>.  Such device objects represent
        SCSI host adaptors for SCSI devices as found in some computer
        systems.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>scsi_host.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the SCSI host adaptor</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-scsi">
      <title>
        <literal>scsi</literal> namespace
      </title>
      <para>
        SCSI devices are represented by device objects where
        <literal>info.bus</literal> equals <literal>scsi</literal>.
        The following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>scsi.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Corresponds to <literal>scsi_host.host</literal>
                of the <literal>scsi_host</literal> device that is the
                parent of this device object
              </entry>
            </row>
            <row>
              <entry>
                <literal>scsi.bus</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI channel number</entry>
            </row>
            <row>
              <entry>
                <literal>scsi.target</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI identifier number</entry>
            </row>
            <row>
              <entry>
                <literal>scsi.lun</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>SCSI Logical Unit Number</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394_host">
      <title>
        <literal>ieee1394_host</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to
        <literal>ieee1394_host</literal> represent IEEE 1394 host
        adaptors. The following properties are available for such
        device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394_host.is_busmgr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.is_irn</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.is_root</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.node_count</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_host.nodes_active</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394_node">
      <title>
        <literal>ieee1394_node</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to
        <literal>ieee1394_node</literal> represent IEEE 1394 nodes on
        a IEEE 1394 bus. The following properties are available for
        such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394_node.capabilities</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.guid</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.nodeid</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.vendor</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>ieee1394_node.vendor_id</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ieee1394">
      <title>
        <literal>ieee1394</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to
        <literal>ieee1394</literal> represent IEEE 1394 devices. The
        following properties are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ieee1394.specifier_id</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-mmc_host">
      <title>
        <literal>mmc_host</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to
        <literal>mmc_host</literal> represent MultiMediaCard or
        Secure Digital host adaptors. The following properties
        are available for such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>mmc_host.host</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>A unique number identifying the MMC/SD host adaptor</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-mmc">
      <title>
        <literal>mmc</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to
        <literal>mmc</literal> represent MultiMediaCard or Secure
        Digital cards. The following properties are available for
        such device objects.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>mmc.cid</literal> (string)
              </entry>
              <entry>example: 0150415330303842413a1a8083003a9d</entry>
              <entry>Yes</entry>
              <entry>Card Identification Data register (unique for every card
                in existence)
              </entry>
            </row>
            <row>
              <entry>
                <literal>mmc.csd</literal> (string)
              </entry>
              <entry>example: 005d013213598067b6d9cfff1640002d</entry>
              <entry>Yes</entry>
              <entry>Card Specific Data register</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.scr</literal> (string)
              </entry>
              <entry>example: 00a5000000410000</entry>
              <entry>Only for SD cards</entry>
              <entry>SD Card Register</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.rca</literal> (int)
              </entry>
              <entry>example: 8083</entry>
              <entry>Yes</entry>
              <entry>Card bus address</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.oem</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Card OEM distributor</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.date</literal> (string)
              </entry>
              <entry>example: 10/2003</entry>
              <entry>Yes</entry>
              <entry>Manufacturing date</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.serial</literal> (int)
              </entry>
              <entry>example: 0x3a1a8083</entry>
              <entry>Yes</entry>
              <entry>Card serial number</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.hwrev</literal> (int)
              </entry>
              <entry>example: 4</entry>
              <entry>Yes</entry>
              <entry>Hardware revision</entry>
            </row>
            <row>
              <entry>
                <literal>mmc.fwrev</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Firmware revision</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ccw">
      <title>
        <literal>ccw</literal> namespace
      </title>
      <para>
        Device objects that represent s390 ccw devices (when <literal>info.bus
        </literal>
         is set to <literal>ccw</literal>) are represented by the
        properties below.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.devtype</literal> (string)
              </entry>
              <entry>example: 1732/01</entry>
              <entry>Yes</entry>
              <entry>Device type/model or n/a</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.cutype</literal> (string)
              </entry>
              <entry>example: 1731/01</entry>
              <entry>Yes</entry>
              <entry>Control unit type/model</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.cmb_enable</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>If channel measurements are enabled</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.availability</literal> (string)
              </entry>
              <entry>example: good</entry>
              <entry>Yes</entry>
              <entry>Can be one of 'good', 'boxed', 'no path',
                or 'no device'
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.online</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Online status</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.bus_id</literal> (string)
              </entry>
              <entry>example: 0.0.f588</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pim</literal> (int)
              </entry>
              <entry>example: 0x80</entry>
              <entry>No</entry>
              <entry>path installed mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pam</literal> (int)
              </entry>
              <entry>example: 0x80</entry>
              <entry>No</entry>
              <entry>path available mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.pom</literal> (int)
              </entry>
              <entry>example: 0xff</entry>
              <entry>No</entry>
              <entry>path operational mask</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.subchannel.chpid0..7</literal> (int)
              </entry>
              <entry>example: 0x40</entry>
              <entry>No</entry>
              <entry>channel path ids</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is either <literal>dasd-eckd</literal>
        or <literal>dasd-fba</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.dasd.use_diag</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>If the device driver shall use diagnose calls to access
                the device
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.dasd.readonly</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>If the device can only be accessed readonly</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.dasd.discipline</literal> (string)
              </entry>
              <entry>example: ECKD</entry>
              <entry>No</entry>
              <entry>The dasd discipline used to access the device</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is <literal>zfcp</literal>. They are
        only present when <literal>ccw.online = 1</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.zfcp.in_recovery</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Shows whether the adapter is currently in recovery</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.zfcp.failed</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>Shows whether the adapter is in failed state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is of the form <literal>tape_3xxx
        </literal>
        .
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.tape.state</literal> (string)
              </entry>
              <entry>example: IN_USE</entry>
              <entry>Yes</entry>
              <entry>The current status of the tape</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.operation</literal> (string)
              </entry>
              <entry>example: REW</entry>
              <entry>Yes</entry>
              <entry>A three-letter mnemonic of the current tape operation
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.medium_state</literal> (string)
              </entry>
              <entry>example: no medium</entry>
              <entry>No</entry>
              <entry>
                If <literal>ccw.online = 1</literal>, shows whether a tape
                is loaded
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.tape.blocksize</literal> (int)
              </entry>
              <entry>example: 512</entry>
              <entry>No</entry>
              <entry>
                If <literal>ccw.online = 1</literal>, shows the blocksize
                used for reads and writes to the tape
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccw</literal> devices where
        <literal>linux.driver</literal> is <literal>3270</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccw.3270.model</literal> (int)
              </entry>
              <entry>example: 3</entry>
              <entry>Yes</entry>
              <entry>The model of the device, determining rows and columns
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccw.3270.rows</literal> (int)
              </entry>
              <entry>example: 32</entry>
              <entry>Yes</entry>
              <entry>The number of rows</entry>
            </row>
            <row>
              <entry>
                <literal>ccw.3270.columns</literal> (int)
              </entry>
              <entry>example: 80</entry>
              <entry>Yes</entry>
              <entry>The number of columns</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ccwgroup">
      <title>
        <literal>ccwgroup</literal> namespace
      </title>
      <para>
        Device objects that represent groups of <literal>ccw</literal> devices
        (when <literal>info.bus</literal> is set to <literal>ccwgroup</literal>
        have the properties specified below.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.online</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Online status</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.bus_id</literal> (string)
              </entry>
              <entry>example: 0.0.f588</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>qeth</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.qeth.large_send</literal> (string)
              </entry>
              <entry>example: TSO</entry>
              <entry>No</entry>
              <entry>Whether large send is provided. Can be "no", "EDDP"
                (software) or "TSO" (hardware).
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.card_type</literal> (string)
              </entry>
              <entry>example: OSD_1000</entry>
              <entry>Yes</entry>
              <entry>Type of the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.checksumming</literal> (string)
              </entry>
              <entry>example: sw checksumming</entry>
              <entry>No</entry>
              <entry>The method used to checksum incoming packets</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.canonical_macaddr</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Specifies the token ring macaddress format. Not valid in
                layer2 mode and for ethernet devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.broadcast_mode</literal> (string)
              </entry>
              <entry>example: broadcast_allrings</entry>
              <entry>No</entry>
              <entry>The scope of token ring broadcasts. Not valid in layer2
                mode and for ethernet devices.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.fake_broadcast</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether to fake broadcast capability. Not valid in layer2
                mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.fake_ll</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether to add a faked link level header to packets.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.layer2</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>Whether the card operates in layer 2 mode</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.portname</literal> (string)
              </entry>
              <entry>example: OSAPORT</entry>
              <entry>No</entry>
              <entry>The port name which has been specified for the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.portno</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>The relative port number on the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.buffer_count</literal> (int)
              </entry>
              <entry>example: 16</entry>
              <entry>Yes</entry>
              <entry>Number of inbound buffers used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.add_hhlen</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>No</entry>
              <entry>How much additional space is provided in the hardware
                header in skbs in front of packets
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.priority_queueing</literal>
                (string)
              </entry>
              <entry>example: always queue 2</entry>
              <entry>No</entry>
              <entry>Which priority queueing algorithm is to be used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.route4</literal> (string)
              </entry>
              <entry>example: no</entry>
              <entry>No</entry>
              <entry>Whether the card has a routing functionality for ipv4.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.route6</literal> (string)
              </entry>
              <entry>example: no</entry>
              <entry>No</entry>
              <entry>Whether the card has a routing functionality for ipv6.
                Not valid in layer2 mode.
              </entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.qeth.state</literal> (string)
              </entry>
              <entry>example: UP (LAN ONLINE)</entry>
              <entry>Yes</entry>
              <entry>The device's current state</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>ctc</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.ctc.protocol</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The protocol/method used by the connection</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.ctc.type</literal> (string)
              </entry>
              <entry>example: CTC/A</entry>
              <entry>Yes</entry>
              <entry>The device/connection type</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.ctc.buffer</literal> (int)
              </entry>
              <entry>example: 32768</entry>
              <entry>No</entry>
              <entry>The maximum buffer size of the connection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>lcs</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.lcs.portnumber</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The port on the card that is used</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.lcs.type</literal> (string)
              </entry>
              <entry>example: OSA LCS card</entry>
              <entry>Yes</entry>
              <entry>The type of the card</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.lcs.lancmd_timeout</literal> (int)
              </entry>
              <entry>example: 5</entry>
              <entry>Yes</entry>
              <entry>The timeout value for LAN commands in seconds</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>ccwgroup</literal> devices
        where <literal>linux.driver</literal> is <literal>claw</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ccwgroup.claw.api_type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Determines the packing algorithm for outgoing pakets
                (matching the remote peer)
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>IP</entry>
              <entry></entry>
              <entry>Using the IP protocol</entry>
            </row>
            <row>
              <entry></entry>
              <entry>PACKED</entry>
              <entry></entry>
              <entry>Using an enhanced packing algorithm</entry>
            </row>
            <row>
              <entry></entry>
              <entry>TCPIP</entry>
              <entry></entry>
              <entry>Using the TCP/IP protocol</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.adapter_name</literal> (string)
              </entry>
              <entry>example: RS1</entry>
              <entry>Yes</entry>
              <entry>The host name of the remote communication peer.</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.host_name</literal> (string)
              </entry>
              <entry>example: LNX1</entry>
              <entry>Yes</entry>
              <entry>The host name of the local adapter.</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.read_buffer</literal> (int)
              </entry>
              <entry>example: 4</entry>
              <entry>Yes</entry>
              <entry>The number of read buffers allocated</entry>
            </row>
            <row>
              <entry>
                <literal>ccwgroup.claw.write_buffer</literal> (int)
              </entry>
              <entry>example: 5</entry>
              <entry>Yes</entry>
              <entry>The number of write buffers allocated</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-iucv">
      <title>
        <literal>iucv</literal> namespace
      </title>
      <para>
        Device objects with <literal>info.bus</literal> set to <literal>iucv
        </literal>
         are using the "Intra-User Comminication Vehicle" and are
        described by the following properties.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>iucv.bus_id</literal> (string)
              </entry>
              <entry>example: netiucv0</entry>
              <entry>Yes</entry>
              <entry>The device's bus id in sysfs</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following properties describe <literal>iucv</literal> devices
        where <literal>linux.driver</literal> is <literal>netiucv</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>iucv.netiucv.user</literal> (string)
              </entry>
              <entry>example: linux12</entry>
              <entry>Yes</entry>
              <entry>The guest name of the connection's target</entry>
            </row>
            <row>
              <entry>
                <literal>iucv.netiucv.buffer</literal> (int)
              </entry>
              <entry>example: 32768</entry>
              <entry>Yes</entry>
              <entry>The maximum buffer size of the connection</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-block">
      <title>
        <literal>block</literal> namespace
      </title>
      <para>
        Device objects representing addressable block devices, such as
        drives and partitions, will have <literal>info.bus</literal>
        set to <literal>block</literal> and will export a number of
        properties in the <literal>block</literal> namespace.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>block.device</literal> (string)
              </entry>
              <entry>example: /dev/sda </entry>
              <entry>Yes</entry>
              <entry>Special device file to interact with the block device</entry>
            </row>
            <row>
              <entry>
                <literal>block.major</literal> (int)
              </entry>
              <entry>example: 8</entry>
              <entry>Yes</entry>
              <entry>Major number of special file to interact with the
                device
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.minor</literal> (int)
              </entry>
              <entry>example: 1</entry>
              <entry>Yes</entry>
              <entry>Minor number of special file to interact with the
                device
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.is_volume</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>True only when the block device is a volume that can
                be mounted into the file system. In this case the
                <literal>volume</literal> capability will be set and
                thus, properties, in the <literal>volume</literal>
                namespace are available.
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.no_partitions</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>For toplevel block devices, this is TRUE only
                when no known partition tables have been found on the
                media (In this case, if the storage device contain a
                file system it will be accessible using the same
                special device file as the one for this device object
                and the device object representing the filesystem will
                appear as a separate device object as a child). For
                the child, that is
                when <literal>block.is_volume</literal> is true, this
                property is TRUE exactly when it was created for a
                storage device with
                the <literal>storage.no_partitions_hint</literal> set
                to TRUE.
              </entry>
            </row>
            <row>
              <entry>
                <literal>block.have_scanned</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                An internal property used by HAL to specify whether a top
                level block device have already been scanned for filesystems.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-xen">
      <title><literal>xen</literal> namespace</title>
      <para>
	Device objects representing virtual devices under the Xen
	Virtual Machine Monitor, such as frontend network or block
	devices, will have <literal>info.bus</literal> set to
	<literal>block</literal> and will export a number of
	properties in then <literal>xen</literal> namespace.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>xen.bus_id</literal> (string)</entry>
              <entry>example: vif-0 </entry>
              <entry>Yes</entry>
              <entry>The XenBus ID of the device</entry>
            </row>
            <row>
              <entry><literal>xen.path</literal> (string)</entry>
              <entry>example: device/vif/0 </entry>
              <entry>Yes</entry>
              <entry>The XenBus path of the device</entry>
            </row>
            <row>
              <entry><literal>xen.type</literal> (string)</entry>
              <entry>example: vif</entry>
              <entry>Yes</entry>
              <entry>The type of Xen device</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>

  <sect1 id="properties-functional">
    <title>Functional Properties</title>
    <para>
      The section describe functional properties of device objects,
      that is, properties that are merged onto device objects
      representing physically addressable hardware. In most
      circumstances such properties stem from a kernel level
      driver attached to the device represented by the device object,
      however, as HAL can merge properties from anywhere, they
      may have been merged from device information files or callouts.
    </para>
    <sect2 id="device-properties-volume">
      <title>
        <literal>volume</literal> namespace
      </title>
      <para>
        This namespace is for device objects that represent storage
        devices with a filesystem that can be mounted. Such device
        objects will have the capability <literal>volume</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>volume</literal> capability
        if they already have the capability <literal>block</literal>
        and the property <literal>block.is_volume</literal> set to TRUE.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>volume.ignore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This is a hint to software higher in the stack
                that this volume should be ignored. If TRUE, the volume
                should be invisible in the UI and mount wrappers should
                refuse to mount it on behalf on an unprivileged
                user. This is useful for hiding e.g. firmware partitions
                (e.g. bootstrap on Mac's) and OS reinstall partitions on
                e.g. OEM systems.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_mounted</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is TRUE if and only if the volume is mounted</entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_mounted_read_only</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is TRUE if and only if the volume is mounted and
                the volume's file-system is read-only.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>example: /media/compact_flash1  </entry>
              <entry>Yes (is blank only when volume.is_mounted is FALSE)</entry>
              <entry>A fully qualified path to the mount point of the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.fsusage</literal> (string)
              </entry>
              <entry>example: filesystem</entry>
              <entry>Yes</entry>
              <entry>
                This property specifies the expected usage of the volume
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>filesystem</entry>
              <entry></entry>
              <entry>The volume is a mountable filesystem</entry>
            </row>
            <row>
              <entry></entry>
              <entry>partitiontable</entry>
              <entry></entry>
              <entry>The volume conatains a partitiontable</entry>
            </row>
            <row>
              <entry></entry>
              <entry>raid</entry>
              <entry></entry>
              <entry>The volume is a member of a raid set and not mountable</entry>
            </row>
            <row>
              <entry></entry>
              <entry>other</entry>
              <entry></entry>
              <entry>The volume is not mountable like a swap partition</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unused</entry>
              <entry></entry>
              <entry>The volume is marked a unused or free</entry>
            </row>
            <row>
              <entry>
                <literal>volume.fstype</literal> (string)
              </entry>
              <entry>example: ext3</entry>
              <entry>Yes (is blank if the filesystem type is unknown)</entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>volume.fsversion</literal> (string)
              </entry>
              <entry>example: FAT32</entry>
              <entry></entry>
              <entry>Version number or subtype of the filesystem</entry>
            </row>
            <row>
              <entry>
                <literal>volume.label</literal> (string)
              </entry>
              <entry>example: 'Fedora Core 1.90' </entry>
              <entry>Yes (is blank if no label is found)</entry>
              <entry>The label of the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.uuid</literal> (string)
              </entry>
              <entry>example: 4060-6C11</entry>
              <entry>Yes (is blank if no UUID is found)</entry>
              <entry>The Universal Unique Identifer for the volume</entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_disc</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>If the volume stems from an optical disc, this
                property is true and the device object will also have
                the capability <literal>volume.disc</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.block_size</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The block size of the volume
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.num_blocks</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Number of blocks on the volume
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.size</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Size of the volume in bytes
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.is_partition</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If the volume stems from a partition on e.g. a hard
                disk, this property is set to <literal>TRUE</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                The number of the partition.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.msdos_part_table_type</literal> (int)
              </entry>
              <entry>examples: 0x83, 0xfd, 0x8e</entry>
              <entry>
                No
              </entry>
              <entry>
                If available, this is the partition type if the disk for which
                this volume stems from is using an MS-DOS-style partition table.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.media_size</literal> (uint64)
              </entry>
              <entry>example: 500107862016</entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                If available, size of the current media or the fixed disk in the storage device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.partition.start</literal> (uint64)
              </entry>
              <entry>example: 32256</entry>
              <entry>
                If, and only if, <literal>volume.is_partition</literal>
                is set to <literal>TRUE</literal>.
              </entry>
              <entry>
                If available, the offset where the physical partition starts on the media or the fixed disk in the storage device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Device objects with this capability may emit the following
        device conditions
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Condition Name</entry>
              <entry>Parameters</entry>
              <entry>Example</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>VolumeMount</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>Emitted when a volume is mounted</entry>
            </row>
            <row>
              <entry>
                <literal>VolumeUnmount</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>Emitted when a volume is unmounted</entry>
            </row>
            <row>
              <entry>
                <literal>VolumeUnmountForced</literal>
              </entry>
              <entry>
                <literal>block.device</literal> (string),
                <literal>volume.mount_point</literal> (string)
              </entry>
              <entry>
                <literal>/dev/sda1</literal>,
                <literal>/media/compact_flash</literal>
              </entry>
              <entry>
                Emitted when a volume is forcibly unmounted because
                the media backing the volume was removed.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-kernel">
      <title>
        <literal>system</literal> namespace
      </title>
      <para>
        This namespace is found on the toplevel "Computer" device,
        and represents information about the system and the currently
        running kernel.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>system.kernel.name</literal> (string)
              </entry>
              <entry>example: Linux</entry>
              <entry>No</entry>
              <entry>
                The name of the kernel, usually the equivalent of
                <literal>uname -s</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.kernel.version</literal> (string)
              </entry>
              <entry>example: 2.6.5-7.104-default</entry>
              <entry>No</entry>
              <entry>
                The version of the currently running kernel.  Usually
                the equivalent of <literal>uname -r</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.kernel.machine</literal> (string)
              </entry>
              <entry>example: i686</entry>
              <entry>No</entry>
              <entry>
                The "machine hardware name" of the currently running kernel.
                Usually the equivalent of <literal>uname -m</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.formfactor</literal> (string)
              </entry>
              <entry>example: laptop, desktop, server, unknown</entry>
              <entry>Yes</entry>
              <entry>
                The formfactor of the system. Usually the equivalent of
                <literal>smbios.chassis.type</literal> or set from information
                about ACPI/APM/PMU properties.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The name of the manufacturer of the machine. Usually the equivalent of
                <literal>smbios.system.manufacturer</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>system.product</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The product name of the machine. Usually the equivalent of
                <literal>smbios.system.product</literal> and
                <literal>smbios.system.version</literal>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-volume-disc">
      <title>
        <literal>volume.disc</literal> namespace
      </title>
      <para>
        This namespace is for device objects that represent optical
        discs, e.g. device objects with the capability
        <literal>volume.disc</literal>. Such device objects will
        also have the capability <literal>volume</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>volume.disc.has_audio</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc contains audio</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.has_data</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc contains data</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_vcd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Video CD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_svcd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Super Video CD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_videodvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is a Video DVD</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_appendable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if it's possible to write additional data</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_blank</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is blank</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.is_rewritable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Is true only if the disc is rewritable</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.capacity</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Capacity of disc, in bytes</entry>
            </row>
            <row>
              <entry>
                <literal>volume.disc.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property specifies the physical type of the disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_rom</entry>
              <entry></entry>
              <entry>CD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_r</entry>
              <entry></entry>
              <entry>CD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cd_rw</entry>
              <entry></entry>
              <entry>CD-RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_rom</entry>
              <entry></entry>
              <entry>DVD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_ram</entry>
              <entry></entry>
              <entry>DVD-RAM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_r</entry>
              <entry></entry>
              <entry>DVD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_rw</entry>
              <entry></entry>
              <entry>DVD-RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_plus_r</entry>
              <entry></entry>
              <entry>DVD+R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>dvd_plus_rw</entry>
              <entry></entry>
              <entry>DVD+RW disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_rom</entry>
              <entry></entry>
              <entry>BD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_r</entry>
              <entry></entry>
              <entry>BD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>bd_re</entry>
              <entry></entry>
              <entry>BD-RE disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_rom</entry>
              <entry></entry>
              <entry>HD DVD-ROM disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_r</entry>
              <entry></entry>
              <entry>HD DVD-R disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>hddvd_rw</entry>
              <entry></entry>
              <entry>HD DVD-Rewritable disc</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unknown</entry>
              <entry></entry>
              <entry>Unknown type or lack of support from drive to determine the type</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage">
      <title>
        <literal>storage</literal> namespace
      </title>
      <para>
        This namespace is used to describe physical storage devices
        and their capabilities. Such device objects will have the
        capability <literal>storage</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>storage</literal> capability
        if they already got capability <literal>block</literal> and the
        property <literal>block.is_volume</literal> set to FALSE.
        One significant between the <literal>storage</literal> and
        <literal>block</literal> namespace is that the properties
        exported in the <literal>storage</literal> represents
        constant vital product information, whereas the properties
        in the <literal>block</literal> namespace represent
        variable system-dependent information.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.bus</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Physical interface the storage device is attached to</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ide</entry>
              <entry></entry>
              <entry>IDE or ATA interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>usb</entry>
              <entry></entry>
              <entry>USB interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>ieee1394</entry>
              <entry></entry>
              <entry>IEEE 1394 interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>scsi</entry>
              <entry></entry>
              <entry>SCSI interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sata</entry>
              <entry></entry>
              <entry>SATA interface</entry>
            </row>
            <row>
              <entry></entry>
              <entry>platform</entry>
              <entry></entry>
              <entry>Legacy device that is part of the platform</entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>storage.drive_type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the drive. Note that it may not be
                possible to probe for some of these properties so in
                some cases memory card readers may appear as
                harddisks. Device information files can be used to
                override this value.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>disk</entry>
              <entry></entry>
              <entry>The device is a harddisk</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cdrom</entry>
              <entry></entry>
              <entry>
                The device is an optical drive. The device object will also have the capability <literal>storage.cdrom</literal> in this case.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>floppy</entry>
              <entry></entry>
              <entry>The device is a floppy disk drive</entry>
            </row>
            <row>
              <entry></entry>
              <entry>tape</entry>
              <entry></entry>
              <entry>The device is a tape drive</entry>
            </row>
            <row>
              <entry></entry>
              <entry>compact_flash</entry>
              <entry></entry>
              <entry>The device is a card reader for Compact Flash memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>memory_stick</entry>
              <entry></entry>
              <entry>The device is a card reader for MemoryStick memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>smart_media</entry>
              <entry></entry>
              <entry>The device is a card reader for SmartMedia memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sd_mmc</entry>
              <entry></entry>
              <entry>The device is a card reader for SecureDigital/MultiMediaCard memory cards</entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
	        <literal>storage.removable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Media can be removed from the storage device</entry>
            </row>
            <row>
              <entry>
	        <literal>storage.size</literal> (uint64)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>size in bytes of the storage device - only meaningful if storage.removable is FALSE</entry>
            </row>
            <row>
              <entry>
                <literal>storage.requires_eject</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The eject ioctl is required to properly eject the media</entry>
            </row>
            <row>
              <entry>
                <literal>storage.hotpluggable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The storage device can be removed while the system is running</entry>
            </row>
            <row>
              <entry>
                <literal>storage.media_check_enabled</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>If this property is set to FALSE then HAL will not continuosly poll for media changes. </entry>
            </row>
            <row>
              <entry>
                <literal>storage.automount_enabled_hint</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property is a hint to desktop file managers that they shouldn't automount volumes of the storage device when they appear.</entry>
            </row>
            <row>
              <entry>
                <literal>storage.no_partitions_hint</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This property is a hint to programs that maintain the
                <literal>/etc/fstab</literal> file to signal, when
                TRUE, that the storage drive (such as floppy or
                optical drives) is used for media with no partition
                table so an entry can be added ahead of media
                insertion time. Note that this is only a hint; media
                may be inserted that has partition tables that the
                kernel may respect. Conversely, when this is FALSE
                media without partition tables may be inserted (an
                example is a Compact Flash card; this media is normally
                formatted with a PC style partition table and a single
                FAT partition. However, it may be formatted with just
                a single FAT partition and no partition table).
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.physical_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This contains the UDI of the device object
                representing the physical device or blank if
                there is no such device (which is TRUE for legacy
                devices such as x86 floppy drives). Additionally, a
                number of properties are merged from that device
                object. Specifically, all properties prefixed
                with <literal>storage</literal> and, if the physical
                device has several storage ports,
                <literal>storage_lunX</literal> (where X is number of
                the port starting from zero) are merged and will have
                the prefix <literal>storage</literal>.
                See <xref linkend="fdi-example-6in1"/> for an example.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.model</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The name of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The vendor of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The serial number of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.firmware_revision</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The revision of the firmware of the drive</entry>
            </row>
            <row>
              <entry>
                <literal>storage.icon.drive</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Name of icon to use for displaying the drive. The name
                must comply with freedesktop.org icon-theme specification
                and must not be an absolute path.
                This property exists such that e.g. OEM's can install
                icons in <literal>/usr/share/icons/hicolor</literal>
                a device information file matching their device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.icon.volume</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Name of icon to use for displaying volumes from the drive.
                The name must comply with freedesktop.org icon-theme
                specification and must not be an absolute path.
                This property exists such that e.g. OEM's can install
                icons in <literal>/usr/share/icons/hicolor</literal>
                a device information file matching their device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage-cdrom">
      <title>
        <literal>storage.cdrom</literal> namespace
      </title>
      <para>
        This namespace is used to describe optical storage drives
        and their capabilities.Such device objects will have the
        capability <literal>storage.cdrom</literal> and
        they will export the properties below. Note that device
        objects can only have the <literal>storage.cdrom</literal> capability
        if they already got the capability <literal>storage</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.cdrom.cdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write CD-R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.cdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to CD-RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read DVD-ROM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD-R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD-RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdram</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD-RAM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD+R discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD+RW discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrwdl</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can blank and write to DVD+RW Dual-Layer discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.dvdplusrdl</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to DVD+R Dual-Layer discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read Blu-ray ROM discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Blu-ray Recordable discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.bdre</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Blu-ray Rewritable discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvd</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can read Read-only HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvdr</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Write-once HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.hddvdrw</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE when the optical drive can write to Rewritable HD DVD discs</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.support_media_changed</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TRUE if the drive can generate media changed events</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.read_speed</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The maximum reading speed, in kb/s</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.write_speed</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The maximum writing speed, in kb/s</entry>
            </row>
            <row>
              <entry>
                <literal>storage.cdrom.write_speeds</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>By the device supported write speeds in kb/s</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-net">
      <title>
        <literal>net</literal> namespace
      </title>
      <para>
        This namespace is used to describe networking devices and
        their capabilities.Such device objects will have the
        capability <literal>net</literal> and they will export the
        properties below. This namespace only describe the generic
        aspect of networking devices; specific networking technologies
        such as IEEE 802.3 and IEEE 802.11 have separate namespaces.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.address</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Hardware address as a string. Is hardware dependant</entry>
            </row>
            <row>
              <entry>
                <literal>net.arp_proto_hw_id</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>ARP protocol hardware identifier</entry>
            </row>
            <row>
              <entry>
                <literal>net.interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Name of the interface; may change if an interface is
                renamed
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.interface_up</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Whether the interface is up</entry>
            </row>
            <row>
              <entry>
                <literal>net.linux.ifindex</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes (only on Linux)</entry>
              <entry>Index of the interface</entry>
            </row>
            <row>
              <entry>
                <literal>net.physical_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>UDI of the physical device the network device is bound to.</entry>
            </row>
            <row>
              <entry>
                <literal>net.media</literal> (string)
              </entry>
              <entry>example: Ethernet</entry>
              <entry>Yes</entry>
              <entry>Textual description of the networking media</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-net-80203">
      <title>
        <literal>net.80203</literal> namespace
      </title>
      <para>
        Ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.80203</literal>.
        Note that device
        objects can only have the <literal>net.80203</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.80203.link</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if the <literal>net.80203</literal> capability is set
                and <literal>net.interface_up</literal> is
                <literal>TRUE</literal>.
              </entry>
              <entry>True if the ethernet adaptor is connected to a
                another transceiver. NOTE: property not implemented yet.
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.80203.rate</literal> (uint64)
              </entry>
              <entry>example: 100000000</entry>
              <entry>
                Only if the <literal>net.80203</literal> capability is set
                and <literal>net.80203.link</literal> is
                <literal>TRUE</literal>.
              </entry>
              <entry>Bandwidth of connection, in bits/s. NOTE: property not
                implemented yet.
              </entry>
            </row>
            <row>
              <entry>
                <literal>net.80203.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.80203</literal> is set
              </entry>
              <entry>48-bit address</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-net-80211">
      <title>
        <literal>net.80211</literal> namespace
      </title>
      <para>
        Wireless ethernet networking devices is described in this namespace
        for device objects with the capability
        <literal>net.80211</literal>.
        Note that device
        objects can only have the <literal>net.80211</literal> capability
        if they already have the capability <literal>net</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>net.80211.mac_address</literal> (uint64)
              </entry>
              <entry>example: 0x0010605d8ef4</entry>
              <entry>
                Only if the <literal>net.80211</literal> capability is set
              </entry>
              <entry>48-bit address</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
      </para>
    </sect2>
    <sect2 id="device-properties-input">
      <title>
        <literal>input</literal> namespace
      </title>
      <para>
        This namespace is concerned with human input devices such as
        keyboards, mice, pointing devices and game controllers. If a
        device object has the capability <literal>input</literal> then
        the following properties are available
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>input.device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>Special device file for recieving input events</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-pcmcia_socket">
      <title>
        <literal>pcmcia_socket namespace</literal>
      </title>
      <para>
        Device objects with the capability <literal>pcmcia_socket</literal>
        represent bridge devices (the actual bus of the device may differ)
        that PCMCIA cards can be attached to. The following properties are
        available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pcmcia_socket.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>PCMCIA socket number, starting from zero</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-printer">
      <title>
        <literal>printer</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>printer</literal>
        represent printers. The following properties are available.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>printer.device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.product</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.description</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>TODO</entry>
            </row>
            <row>
              <entry>
                <literal>printer.commandset</literal> (strlist)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>List of supported commands / printer languages.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-portable_audio_player">
      <title>
        <literal>portable_audio_player</literal> namespace
      </title>
      <para>
        Device objects with the capability
        <literal>portable_audio_player</literal> represent portable
        audio players that can be attached to a computer to exchange
        files. They can also playback audio. Sometimes they can also
        record audio. This capability can't, in general, be reliably
        probed from the hardware so the information needs to be merged
        from either device information files or callouts. Therefore
        this capability should be merged on the appropriate device
        object that represents the addressable piece of hardware that
        is the portable music player; for USB devices this would be
        the device object representing the appropriate USB
        interface. The following properties are available:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>portable_audio_player.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property defines how the device is accessed </entry>
            </row>
            <row>
              <entry></entry>
              <entry>storage</entry>
              <entry></entry>
              <entry>
                The device is accessed as a Mass Storage device
                through a kernel driver.  Application Developers
                should descent down the device object tree to find the
                device object of capability
                <literal>storage</literal> in order to access the
                device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>user</entry>
              <entry></entry>
              <entry>
                The device is accessed from userspace through
                a userspace driver.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.output_formats</literal> (strlist)
              </entry>
              <entry>example: audio/mpeg audio/x-ms-wma</entry>
              <entry>Yes</entry>
              <entry>
                A string list of MIME-types representing the kind of audio
                formats that the device can play back
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.input_formats</literal> (strlist)
              </entry>
              <entry>example: audio/x-wav</entry>
              <entry>Yes</entry>
              <entry>
                A string list of MIME-types representing the kind of audio
                formats that the device can record. If empty, it means that
                the device is not capable of recording.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.folder_depth </literal> (int)
              </entry>
              <entry>example: 1 (If the device only supports one sub-folder)</entry>
              <entry>No</entry>
              <entry>
                If portable_audio_player.access_method = "storage",
                this tells applications exactly how deep of directory hierarchies
                files should be placed in.  If all files are put in a
                sub-folder (with the audio_folders property), only the depth within
                that sub-folder should be entered here. If the device does not have
                a limit, do not set this property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.audio_folders</literal> (strlist)
              </entry>
              <entry>example: music/ voice/ linein/</entry>
              <entry>No</entry>
              <entry>
                If portable_audio_player.access_method = "storage",
                this may contain a string list of folders in which music
                can be found.  Paths are relative to the mount point of the
                device. If there is one or more entry in this property, the
                first one is where files will be written to by applications.
                Do not enter a folder and a parent of that folder.
                If the device places files in its root directory, then do not
                set this property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.playlist_format</literal> (strlist)
              </entry>
              <entry>example: audio/x-mpegurl audio/x-somethingelse</entry>
              <entry>No</entry>
              <entry>
                A string list of the MIME-type of the playlist formats accepted by
                this device.  Leave blank if none.
              </entry>
            </row>
            <row>
              <entry>
                <literal>portable_audio_player.playlist_path</literal> (string)
              </entry>
              <entry>examples: playlists/%File or Playlist.m3u</entry>
              <entry>No</entry>
              <entry>
                Set to the path to which playlists should be written.  Leave
                blank if playlist files are not supported.  If the device supports a single playlist with a specific name/path,
                set this to the path relative to the mount point that it should be saved to.  If it supports multiple
                playlists, use the %File variable as needed.  Applications are responsible for substituting %File with the
                desired playlist file name, noting that it's use in this string is optional.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-alsa">
      <title>
        <literal>alsa</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>alsa</literal>
        represent all the streams available through ALSA on a soundcard.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>alsa.card</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Card number in system as registered by ALSA.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.card_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>I82801DBICH4</literal>, <literal>MP3</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Device number assigned by ALSA for a current card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device_file</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The device node to access the ALSA device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.device_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>Intel 82801DB-ICH4 MIC2 ADC</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the specific device for a card
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.physical_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                UDI of the physical device the ALSA device is bound to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>alsa.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the stream.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>control</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is control device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>capture</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is capture device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>playback</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is playback device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>timer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is the global ALSA timer device.
                This means, the device is for all ALSA devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>sequencer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is the global ALSA sequencer device.
                This means, the device is for all ALSA devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is unknown device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-oss">
      <title>
        <literal>oss</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>oss</literal>
        represent all the streams available through OSS on a soundcard.
        OSS devices could be emulated by ALSA.
      </para>
      <para>
        Note: All OSS devices, except the global devices, are only added if the
        kernel supports links from oss device to physical device in sysfs. For a patch
        see:  http://thread.gmane.org/gmane.comp.freedesktop.hal/2862.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>oss.card</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Card number in system as registered by OSS (and/or ALSA).
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.card_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>I82801DBICH4</literal>, <literal>MP3</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                Device number assigned by OSS/ALSA for a current card.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device_file</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The device node to access the OSS device.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.device_id</literal> (string)
              </entry>
              <entry>
                Examples: <literal>Intel 82801DB-ICH4 MIC2 ADC</literal>
              </entry>
              <entry>No</entry>
              <entry>
                Textual description of the specific device for a card
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.physical_device</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                UDI of the physical device the OSS device is bound to.
              </entry>
            </row>
            <row>
              <entry>
                <literal>oss.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The type of the stream.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>mixer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is control/mixer device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>pcm</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is PCM device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>midi</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is MIDI device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>sequencer</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is a global OSS sequencer device.
                This means, the device is for all OSS devices/cards.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                Stream is unknown device.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-camera">
      <title>
        <literal>camera</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>camera</literal>
        represent digital still cameras that can be attached to a
        computer to exchange files. This does not include card readers
        for memory cards used for cameras. This capability can't, in
        general, be reliably probed from the hardware so the
        information needs to be merged from either device information
        files or callouts. Therefore this capability should be merged
        on the appropriate device object that represents the
        addressable piece of hardware that is the digital still
        camera; for USB devices this would be the device object
        representing the appropriate USB interface. The following
        properties are available:
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>camera.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>This property defines how the device is accessed </entry>
            </row>
            <row>
              <entry></entry>
              <entry>storage</entry>
              <entry></entry>
              <entry>
                The device is accessed as a Mass Storage device
                through a kernel driver.  Application Developers
                should descent down the device object tree to find the
                device object of capability
                <literal>storage</literal> in order to access the
                device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>user</entry>
              <entry></entry>
              <entry>
                The device is accessed from userspace through
                a userspace driver.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry></entry>
              <entry></entry>
              <entry></entry>
            </row>
            <row>
              <entry>
                <literal>camera.libgphoto2.support</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If true, the device is supported by a userspace driver
                from the libgphoto2 project.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-laptop-panel">
      <title>
        <literal>laptop_panel</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>laptop_panel</literal>
        represent devices capable of changing the brightness of the display.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>laptop_panel.num_levels</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The brightness levels supported by the adaptor.
              </entry>
            </row>
            <row>
              <entry>
                <literal>laptop_panel.access_method</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The access method to use in scripts, e.g. pmu, toshiba, ibm, sony.
              </entry>
            </row>
            <row>
              <entry>
                <literal>laptop_panel.brightness_in_hardware</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                On some laptops, the brightness control is all done in hardware
                but the hardware also synthesizes keypresses when the
                brightness is changed.
                If this key is set true, then any power manager software should
                not attempt to set any new values on brightness keypress, as it
                may cause the panel to flash uncontrollably.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following methods exist on the interface
        <literal>org.freedesktop.Hal.Device.LaptopPanel</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Method (parameter types)</entry>
              <entry>Parameters</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>SetBrightness</literal> (integer)
              </entry>
              <entry>
                The hardware brightness state, which should be between 0 and 
                <literal>laptop_panel.num_levels</literal> - 1.
              </entry>
              <entry>No</entry>
              <entry>
                This method adjusts the brightness on an laptop screen.
                The values are returned as hardware values rather than
                percentages as we cannot easily to floating point rounding in
                shell code and therefore use the raw values to prevent integer
                rounding errors.
              </entry>
            </row>
            <row>
              <entry>
                integer <literal>GetBrightness</literal> (void)
              </entry>
              <entry>
                Returns the hardware brightness state, which should be
                between 0 and <literal>laptop_panel.num_levels</literal> - 1.
              </entry>
              <entry>No</entry>
              <entry>
                This method gets the hardware brightness of the laptop screen,
                which we may need to do fairly regually on hardware that
                changes the values in hardware without a software event.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-video_adapter_pm">
      <title>
        <literal>video_adapter_pm</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>video_adapter_pm</literal>
        represent video adapters that need to be suspended or resumed in device
        specific ways.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>video_adapter_pm.s3_bios</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Use the S3_BIOS kernel command for suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.s3_mode</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Use the S3_MODE kernel command for suspend.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.dpms_suspend</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Suspend the video card via DPMS.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.vga_mode_3</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Reset the VGA text mode to mode 3 on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.dpms_on</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Reactivate the screen with DPMS on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.vbe_post</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Run the VGA BIOS Power On Self Test (POST) on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.vbestate_restore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Save the VGA BIOS state before suspend, and restore it on resume.</entry>
            </row>
            <row>
              <entry>
                <literal>video_adapter_pm.vbemode_restore</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Save the VGA BIOS mode before suspend, and restore it on resume.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following methods exist on the interface
        <literal>org.freedesktop.Hal.Device.VideoAdapterPM</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Method (parameter types)</entry>
              <entry>Parameters</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                void <literal>SuspendVideo</literal> (void)
              </entry>
              <entry>None</entry>
              <entry>No</entry>
              <entry>
                Suspends the video adapter using the quirks specified.
              </entry>
            </row>
            <row>
              <entry>
                void <literal>ResumeVideo</literal> (void)
              </entry>
              <entry>None</entry>
              <entry>No</entry>
              <entry>
                Resumes the video adapter using the quirks specified.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-ac_adaptor">
      <title>
        <literal>ac_adaptor</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>ac_adaptor</literal>
        represent all the devices capable of powering the system from AC power
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ac_adaptor.present</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The state of the adaptor, i.e. whether it is providing power to
                the unit from mains power.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-battery">
      <title>
        <literal>battery</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>battery</literal>
        represent all the devices having some battery (in many cases -
        rechargeable) inside.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>battery.present</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This is present as some smart batteries can have acpi/pmu
                entries, and be physically missing.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                This property defines the type of the device holding the
                battery. This property is defined for the development
                simplicity - battery indicators can use it to find the
                proper iconic representation.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>pda</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a personal digital
                assistant, e.g. a device that looks like a handheld computer
                to do specific tasks such as keeping notes or containing
                a personal database
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>ups</literal>
              </entry>
              <entry></entry>
              <entry>
                A battery powered power supply that is
                guaranteed to provide power to a computer in the event of
                interruptions in the incoming electrical power. Most of the
                time this is an external device.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>primary</literal>
              </entry>
              <entry></entry>
              <entry>
                The battery is a primary power source for the system - an
                example are laptop batteries.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>mouse</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a mouse.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>keyboard</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a keyboard.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>keyboard_mouse</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a combined mouse and keyboard.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>camera</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is a camera.
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>
                <literal>unknown</literal>
              </entry>
              <entry></entry>
              <entry>
                The device containing the battery is not covered by other types.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.unit</literal> (string)
              </entry>
              <entry>Examples:
                <literal>mWh</literal>,
                <literal>percent</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical unit used by the charge level properties
                (maximum and current). In many cases, this property is
                omitted - which indicates that the charge properties
                are measured in some unknown units.
                The units should never be mAh as this is not a measurement
                of charge.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device was designed for.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.last_full</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device could hold the last
                time it was full.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The current level of charge which the device can is holding.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.rate</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The discharge/charge rate measured
                in <literal>"battery.charge_level.unit"</literal>
                units per second.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.warning</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value its
                state changes to 'warning'.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.low</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value its
                state changes to 'low'.
                Measured in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.granularity_1</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Granularity value one of the battery measured
                in <literal>"battery.charge_level.unit"</literal>
                units .
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.granularity_2</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Granularity value two of the battery measured
                in <literal>"battery.charge_level.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.unit</literal> (string)
              </entry>
              <entry>Examples:
                <literal>mWh</literal>,
                <literal>mAh</literal>,
                <literal>percent</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical unit used by the charge level properties
                (maximum and current) as reported by the hardware.
                In many cases, this property is omitted - which indicates
                that the charge properties are measured in some unknown units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The maximum level of charge the device was designed for,
                as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.last_full</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The maximum level of charge the device could hold the last
                time it was full, as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The current level of charge which the device is holding,
                as reported by the hardware.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.rate</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The discharge/charge rate as reported by the hardware measured
                in <literal>"battery.reporting.unit"</literal>
                units per second.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.warning</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the hardware charge level of the battery drops below
                this value its state changes to 'warning'.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.low</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the hardware charge level of the battery drops below
                this value its state changes to 'low'.
                Measured in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.granularity_1</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Hardware granularity value one of the battery measured
                in <literal>"battery.reporting.unit"</literal>
                units .
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.reporting.granularity_2</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Hardware granularity value two of the battery measured
                in <literal>"battery.reporting.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.capacity_state</literal> (string)
              </entry>
              <entry>
                Examples: <literal>ok</literal>, <literal>critical</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The capacity state of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.unit</literal> (string)
              </entry>
              <entry>
                Examples: <literal>mV</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical measurement unit used by the voltage properties
                (design and current).
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The voltage level for which the battery is designed for.
                Measured in <literal>"battery.voltage.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.voltage.current</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The voltage level currently emitted by the battery.
                Measured in <literal>"battery.voltage.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.alarm.unit</literal> (string)
              </entry>
              <entry>
                Examples: <literal>mWh</literal>, <literal>mAh</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The physical measurement unit used by the alarm property.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.alarm.design</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Once the charge level of the battery drops below this value
                its state changes to 'alarm'.
                Measured in <literal>"battery.alarm.unit"</literal>
                units.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.remaining_time</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Remaining time, in seconds, that the battery can provide
                power (if discharging) or the time until charged (if charging).
                This is an estimate and may be imprecise.
                This key is not present for invalid data.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.remaining_time.calculate_per_time</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If this property is <literal>true</literal> the
                <literal>battery.remaining_time</literal> becomes guessed from
                <literal>battery.charge_level.current</literal> and time.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.charge_level.percentage</literal> (int)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Charge, normalised to percent. This is useful if an application
                does not want to process the raw values and do all the extra
                checks on the result. This key is not present for invalid data.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.is_rechargeable</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                True if the battery unit is rechargeable, false if its is
                one-time (disposable after one usage).
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.rechargeable.is_charging</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if <literal>battery.is_rechargeable</literal> is TRUE
              </entry>
              <entry>
                TRUE if, and only if, the battery is charging.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.rechargeable.is_discharging</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only if <literal>battery.is_rechargeable</literal> is TRUE
              </entry>
              <entry>
                TRUE if, and only if, the battery is discharging.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.command_interface</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The abstract name allowing daemons and/or user-level apps
                to distinguish some groups of devices having similar
                programming  interface. Introduced mostly for the daemons'
                coding simplicity.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.vendor</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Vendor of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.model</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Make of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.technology</literal> (string)
              </entry>
              <entry>example: LION</entry>
              <entry>No</entry>
              <entry>
                The technology of the battery.
              </entry>
            </row>
            <row>
              <entry>
                <literal>battery.serial</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                A string uniquely identifying the instance of the battery;
                it will be different for two (otherwise) identical batteries.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-button">
      <title>
        <literal>button</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>button</literal>
        represent the devices capable of providing a state to the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>button.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>The type of button</entry>
            </row>
            <row>
              <entry></entry>
              <entry>lid</entry>
              <entry></entry>
              <entry>
                The switch on a laptop that senses whether the lid is
                open or closed
              </entry>
            </row>
            <row>
              <entry></entry>
              <entry>power</entry>
              <entry></entry>
              <entry>The main power button on the computer.</entry>
            </row>
            <row>
              <entry></entry>
              <entry>sleep</entry>
              <entry></entry>
              <entry>
                The sleep button on a computer capable of putting the computer
                into a suspend state
              </entry>
            </row>
            <row>
              <entry>
                <literal>button.has_state</literal> (bool)
              </entry>
              <entry></entry>
              <entry>no</entry>
              <entry>True if the button maintains state, e.g. can toggled on/off</entry>
            </row>
            <row>
              <entry>
                <literal>button.state.value</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                Only when <literal>button.has_state</literal> is
                TRUE
              </entry>
              <entry>State of the button, TRUE if it is enabled</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Device objects with this capability may emit the following events.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Condition Name</entry>
              <entry>Parameters</entry>
              <entry>Example</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ButtonPressed</literal>
              </entry>
              <entry>
                <literal>button.type (string)</literal>
              </entry>
              <entry>sleep</entry>
              <entry>Emitted when a button is pressed</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-processor">
      <title>
        <literal>processor</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>processor</literal>
        represent CPU's in the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>processor.number</literal> (int)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                The internal processor number in the system, starting from zero
              </entry>
            </row>
            <row>
              <entry>
                <literal>processor.can_throttle</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Whether the processor supports throttling to decrease it's
                own clock speed
              </entry>
            </row>
            <row>
              <entry>
                <literal>processor.maximum_speed</literal> (long)
              </entry>
              <entry>example: 2200</entry>
              <entry>No</entry>
              <entry>The maximum speed of the processor in units of MHz</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-display_device">
      <title>
        <literal>display_device</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>display_device</literal>
        represent display devices attached to the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>display_device.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The type of display device</entry>
            </row>
            <row>
              <entry></entry>
              <entry>lcd</entry>
              <entry></entry>
              <entry>LCD panel</entry>
            </row>
            <row>
              <entry></entry>
              <entry>crt</entry>
              <entry></entry>
              <entry>CRT tube</entry>
            </row>
            <row>
              <entry></entry>
              <entry>tv_out</entry>
              <entry></entry>
              <entry>TV Out</entry>
            </row>
            <row>
              <entry>
                <literal>display_device.lcd.brightness</literal> (int)
              </entry>
              <entry></entry>
              <entry>
                Only if <literal>display_device.type</literal> is lcd
              </entry>
              <entry>Brightness level in percent</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-sensor">
      <title>
        <literal>sensor</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>sensor</literal>
        represent light or temperature sensors in the system.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>sensor.type</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The type of sensor device</entry>
            </row>
            <row>
              <entry></entry>
              <entry>light</entry>
              <entry></entry>
              <entry>Light sensor</entry>
            </row>
            <row>
              <entry></entry>
              <entry>temperature</entry>
              <entry></entry>
              <entry>Temperature sensor</entry>
            </row>
            <row>
              <entry>
                <literal>sensor.location</literal> (string)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>The location of the sensor device</entry>
            </row>
            <row>
              <entry></entry>
              <entry>gpu</entry>
              <entry></entry>
              <entry>Measures GPU source</entry>
            </row>
            <row>
              <entry></entry>
              <entry>cpu</entry>
              <entry></entry>
              <entry>Measures CPU source</entry>
            </row>
            <row>
              <entry></entry>
              <entry>external</entry>
              <entry></entry>
              <entry>Measures external source</entry>
            </row>
            <row>
              <entry></entry>
              <entry>unknown</entry>
              <entry></entry>
              <entry>Measuring other source</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-power-management">
      <title>
        <literal>power_management</literal> namespace
      </title>
      <para>
        Keys with the prefix <literal>power_management</literal>
        provide information about power management supported by
        your computer.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>power_management.type</literal> (string)
              </entry>
              <entry>Examples:
                <literal>apm</literal>,
                <literal>acpi</literal>,
                <literal>pmu</literal>
              </entry>
              <entry>Yes</entry>
              <entry>
                The power management subsystem used on the computer.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_suspend</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If suspend support is compiled into the kernel.
                NB. This may not mean the machine is able to suspend
                successfully.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_hibernate</literal> (bool)
              </entry>
              <entry></entry>
              <entry>Yes</entry>
              <entry>
                If hibernation support is compiled into the kernel.
                NB. This may not mean the machine is able to hibernate
                successfully.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_suspend_to_ram</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If suspend support is compiled into the kernel.
                NB. This may not mean the machine is able to suspend
                successfully.
                WARNING: This key is depreciated and power_management.can_suspend
                should be used in its place. This key will be removed, but not before May 1st 2007.
              </entry>
            </row>
            <row>
              <entry>
                <literal>power_management.can_suspend_to_disk</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                If hibernation support is compiled into the kernel.
                NB. This may not mean the machine is able to hibernate
                successfully.
                WARNING: This key is depreciated and power_management.can_hibernate
                should be used in its place. This key will be removed, but not before May 1st 2007.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The following methods exist on the interface
        <literal>org.freedesktop.Hal.Device.SystemPowerManagement</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Method (parameter types)</entry>
              <entry>Parameters</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>Suspend</literal> (integer)
              </entry>
              <entry>
                The number of seconds until we resume automatically, or zero if
                we should not auto-resume.
              </entry>
              <entry>No</entry>
              <entry>
                This method puts the system in a state where little power is consumed.
                The system is not operational while in this state.
                Latency for the system to return to an operational state is in
                the order of magnitude of 5 seconds.
              </entry>
            </row>
            <row>
              <entry>
                <literal>Hibernate</literal> (void)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                This method puts the system in a state where no power is consumed.
                The system is not operational while in this state.
                Latency for the system to return to an operational state is in
                the order of magnitude of one minute.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-tape">
      <title>
        <literal>tape</literal> namespace
      </title>
      <para>
        Device objects with the capability <literal>tape</literal>
        represent tape devices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>tape.major</literal> (int)
              </entry>
              <entry>example: 254</entry>
              <entry>Yes</entry>
              <entry>The device's major number</entry>
            </row>
            <row>
              <entry>
                <literal>tape.minor</literal> (int)
              </entry>
              <entry>example: 0</entry>
              <entry>Yes</entry>
              <entry>The device's minor number</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>

  <sect1 id="properties-policy">
    <title>Policy Properties</title>
    <para>
      The properties on a hal device object can be used to express
      certain policies about how the device is to be used. This
      information can be used by either programs querying hal
      directly or by hal callouts. Default policy (e.g. always
      mount a file system with the option 'exec') can also be
      merged on the root computer device object.
    </para>
    <sect2 id="device-properties-storage-policy-default">
      <title>
        <literal>storage.policy.default</literal> namespace
      </title>
      <para>
        This namespace specifies the default policy for storage
        devices - these properties should be merged on the root computer
        device object.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.policy.default.use_managed_keyword</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Whether to use a <emphasis>managed no
                  operation
                </emphasis>
                keyword when adding entries to
                the File Systems file (<literal>/etc/fstab</literal>) -
                this is used to identify entries added by a program
                that modifies this file.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.default.managed_keyword.primary</literal> (string)
              </entry>
              <entry>Example: 'managed'</entry>
              <entry>No</entry>
              <entry>No-op keyword to use when adding entries to the file systems file</entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.default.managed_keyword.secondary</literal> (string)
              </entry>
              <entry>Example: 'kudzu'</entry>
              <entry>No</entry>
              <entry>
                Secondary no-op keyword that identifies entries added
                to the file systems file. The secondary keyword is never
                written; only read. This is useful when making a transition
                from one managed keyword to another.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.default.mount_option.*</literal> (bool)
              </entry>
              <entry>Examples:
                <literal>.noauto</literal>,
                <literal>.exec</literal>,
                <literal>.console</literal>,
                <literal>.fscontext=system_u:object_r:removable_t</literal>
              </entry>
              <entry>No</entry>
              <entry>
                This is actually an entire namespace that specifies
                what options a storage device should be mounted with,
                e.g. the example <literal>.exec</literal> should be read as
                <literal>storage.policy.default.mount_option.exec</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.default.mount_root</literal> (string)
              </entry>
              <entry>
                Example: <literal>/media</literal>
              </entry>
              <entry>No</entry>
              <entry>
                The default mount root to use when computing what
                mount point to use for a storage device
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-storage-policy">
      <title>
        <literal>storage.policy</literal> namespace
      </title>
      <para>
        This namespace contains properties that can be merged on
        individual storage devices to specify how and if the storage
        device should be mounted.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>storage.policy.should_mount</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Whether any volumes from this storage device
                should be mounted
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.desired_mount_point</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                No (only applicable if the
                property <literal>storage.no_partitions_hint</literal>
                is set to TRUE)
              </entry>
              <entry>
                The desired mount point for this storage device. The
                path must not be fully qualified and there is no
                guarantee that and storage policy agents, such as
                policy mount wrappers or programs modifying the file
                systems file will use this mount point.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.mount_option.*</literal> (bool)
              </entry>
              <entry></entry>
              <entry>
                No (only applicable if the
                property <literal>storage.no_partitions_hint</literal>
                is set to TRUE)
              </entry>
              <entry>
                Mount options to use, see property
                <literal>storage.policy.default.mount_option.*</literal>
                for details.
              </entry>
            </row>
            <row>
              <entry>
                <literal>storage.policy.mount_filesystem</literal> (string)
              </entry>
              <entry></entry>
              <entry>
                No (only applicable if the
                property <literal>storage.no_partitions_hint</literal>
                is set to TRUE)
              </entry>
              <entry>File system to use when mounting the storage device.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="device-properties-volume-policy">
      <title>
        <literal>volume.policy</literal> namespace
      </title>
      <para>
        This namespace contains properties that can be merged on
        individual volumes to specify how and if the volume
        should be mounted.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Key (type)</entry>
              <entry>Values</entry>
              <entry>Mandatory</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>volume.policy.should_mount</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>Whether this volume should be mounted at all</entry>
            </row>
            <row>
              <entry>
                <literal>volume.policy.mount_filesystem</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>File system to use when mounting the volume.</entry>
            </row>
            <row>
              <entry>
                <literal>volume.policy.desired_mount_point</literal> (string)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                The desired mount point for this volume. The
                path must not be fully qualified and there is no
                guarantee that and storage policy agents, such as
                policy mount wrappers or programs modifying the file
                systems file will use this mount point.
              </entry>
            </row>
            <row>
              <entry>
                <literal>volume.policy.mount_option.*</literal> (bool)
              </entry>
              <entry></entry>
              <entry>No</entry>
              <entry>
                Mount options to use, see property 
                <literal>storage.policy.default.mount_option.*</literal>
                for details.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>

</chapter>
